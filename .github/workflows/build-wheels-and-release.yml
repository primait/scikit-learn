# Workflow to build and test wheels
name: Build Wheels and Release to GitHub

on:
  # Manual run
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release Version'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Build the wheels for Linux, Windows and macOS for Python 3.8 and newer
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # Window 64 bit
          # Note: windows-2019 is needed for older Python versions:
          # https://github.com/scikit-learn/scikit-learn/issues/22530
          - os: windows-2019
            python: 38
            platform_id: win_amd64
          - os: windows-latest
            python: 39
            platform_id: win_amd64
          - os: windows-latest
            python: 310
            platform_id: win_amd64
          - os: windows-latest
            python: 311
            platform_id: win_amd64

          # Linux 64 bit manylinux2014
          - os: ubuntu-latest
            python: 38
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 39
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # NumPy on Python 3.10 only supports 64bit and is only available with manylinux2014
          - os: ubuntu-latest
            python: 310
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          - os: ubuntu-latest
            python: 311
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # MacOS x86_64
          - os: macos-latest
            python: 38
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 39
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 310
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 311
            platform_id: macosx_x86_64

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # update once build dependencies are available
      
      - name: Build and test wheels
        env:
          CONFTEST_PATH: ${{ github.workspace }}/conftest.py
          CONFTEST_NAME: conftest.py
          CIBW_ENVIRONMENT: SKLEARN_SKIP_NETWORK_TESTS=1
                            SKLEARN_BUILD_PARALLEL=3
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_TEST_SKIP: "*-macosx_arm64"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir}
          CIBW_BEFORE_TEST_WINDOWS: bash build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }}
          CIBW_TEST_REQUIRES: pytest pandas threadpoolctl
          CIBW_TEST_COMMAND: bash {project}/build_tools/wheels/test_wheels.sh
          CIBW_TEST_COMMAND_WINDOWS: bash {project}/build_tools/github/test_windows_wheels.sh ${{ matrix.python }}
          CIBW_BUILD_VERBOSITY: 1
          CONDA_HOME: /usr/local/miniconda

        run: bash build_tools/wheels/build_wheels.sh
      
      - name: Store Wheels
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl


  create_release:
   name: Create Release
   runs-on: ubuntu-latest
   needs: [build_wheels, build_sdist]
   if: ${{ inputs.release_version }}
   
   steps:
     - name: Download Wheels
       uses: actions/download-artifact@v3
       with:
         path: ./artifact
       
     - name: Create Archive
       run: zip -r wheels.zip ./artifact/*
       
     - name: Create Release
       id: create_release
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: ${{ inputs.release_version }}
         release_name: Release ${{ inputs.release_version }}
     
     - name: Upload Wheels to Release
       id: upload-release-asset
       uses: actions/upload-release-asset@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
        upload_url: ${{steps.create_release.outputs.upload_url }}
        asset_path: ./wheels.zip
        asset_name: ./wheels.zip
        asset_content_type: application/zip

  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # update once build dependencies are available

      - name: Build source distribution
        run: bash build_tools/github/build_source.sh
        env:
          SKLEARN_BUILD_PARALLEL: 3

      - name: Test source distribution
        run: bash build_tools/github/test_source.sh
        env:
          SKLEARN_SKIP_NETWORK_TESTS: 1

      - name: Store artifacts
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
